{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Project 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import subprocess\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "import scipy\n",
    "import requests\n",
    "from imdbpie import Imdb\n",
    "import nltk\n",
    "import matplotlib.pyplot as plt\n",
    "import urllib\n",
    "from bs4 import BeautifulSoup\n",
    "import nltk\n",
    "import collections\n",
    "import re\n",
    "import csv\n",
    "import psycopg2\n",
    "from scrapy.selector import Selector\n",
    "from scrapy.http import HtmlResponse\n",
    "from types import NoneType\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "NUMREVIEWS = 3 # If you want more movie reviews loaded for model testing/adjustment, change this value here, and re-run the code\n",
    "DATALOAD = 'CSV'  # If you want to load using IMDB API, change to 'IMDB'.  NOTE:  IMDB load takes a long time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pre-Work: Write a problem statement "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 1: Acquire the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Connect to the IMDB API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "if (DATALOAD == 'IMDB'):\n",
    "    imdb = Imdb()\n",
    "    imdb = Imdb(anonymize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Query the top 250 rated movies in the database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successful load of the Movie & Review data from CSV file.\n"
     ]
    }
   ],
   "source": [
    "if (DATALOAD == 'IMDB'):\n",
    "    MoviesList = imdb.top_250()\n",
    "    if len(MoviesList) == 250 :\n",
    "        print 'Successful load of the Top 250 Movies.'\n",
    "    else:\n",
    "        print 'Failed to load Top 250 Movies.'\n",
    "else: # Load movie and review data from CSV file\n",
    "    dfMovies = pd.read_csv(filepath_or_buffer=\"Top25Movies.csv\", sep='\\t',na_values='')\n",
    "    dfReviews = pd.read_csv(filepath_or_buffer=\"MovieReviews.csv\", sep='\\t',na_values='')\n",
    "    print 'Successful load of the Movie & Review data from CSV file.'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Only select the top 25 movies and delete the uncessary rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "## Credit to Paul Trichon for the research on this section of code.\n",
    "\n",
    "if (DATALOAD == 'IMDB'):\n",
    "    # Initialize variables\n",
    "    counter=0\n",
    "    moviesDictList = {\"title_id\":[],\n",
    "                  \"title\": [],\n",
    "                  \"year\":[],\n",
    "                  \"type\":[],\n",
    "                  \"rating\":[],\n",
    "                  \"total_votes\":[]}\n",
    "    reviewsDictList = {\"title_id\":[],\n",
    "                      \"username\":[],\n",
    "                      \"review_text\":[],\n",
    "                      \"review_date\":[],\n",
    "                      \"summary\":[],\n",
    "                      \"status\":[],\n",
    "                      \"user_location\":[],\n",
    "                      \"user_score\":[],\n",
    "                      \"user_score_count\":[]}\n",
    "\n",
    "    # Cycle through the top 25 movies.\n",
    "    for movie in MoviesList:\n",
    "        counter += 1\n",
    "        # When we have loaded 25 movies, break out of the loop.\n",
    "        if counter > 25:\n",
    "            break\n",
    "\n",
    "        # Load the movie information into a movieDict variable.\n",
    "        title_id = movie[\"tconst\"]\n",
    "        moviesDictList[\"title_id\"].append(title_id)\n",
    "        moviesDictList[\"title\"].append(movie[\"title\"].encode('utf-8').strip())\n",
    "        moviesDictList[\"year\"].append(movie[\"year\"])\n",
    "        moviesDictList[\"type\"].append(movie[\"type\"].encode('utf-8').strip())\n",
    "        moviesDictList[\"rating\"].append(movie[\"rating\"])\n",
    "        moviesDictList[\"total_votes\"].append(movie[\"num_votes\"])\n",
    "\n",
    "        # For each movie, get NUMREVIEWS reviews.\n",
    "        # NOTE:  If you want to change the number of reviews retrieved, please do so in Cell #1.\n",
    "        reviewsList = imdb.get_title_reviews(title_id,max_results = NUMREVIEWS) \n",
    "        # Load each review into a reviews data dictionary.\n",
    "        for review in reviewsList:\n",
    "            reviewsDictList[\"title_id\"].append(title_id)\n",
    "            reviewsDictList[\"username\"].append(review.username)\n",
    "            reviewsDictList[\"review_text\"].append(review.text)\n",
    "            reviewsDictList[\"review_date\"].append(review.date)\n",
    "            reviewsDictList[\"summary\"].append(review.summary)\n",
    "            reviewsDictList[\"status\"].append(review.status)\n",
    "            reviewsDictList[\"user_location\"].append(review.user_location)\n",
    "            reviewsDictList[\"user_score\"].append(review.user_score)\n",
    "            reviewsDictList[\"user_score_count\"].append(review.user_score_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "if (DATALOAD == 'IMDB'):\n",
    "    # Load the Movies into a dataframe.\n",
    "    dfMovies = pd.DataFrame(data=moviesDictList,columns=[\"title_id\",\"title\",\"year\",\"type\",\"rating\",\"total_votes\"])\n",
    "\n",
    "    # Load the Reviews into a dataframe.\n",
    "    dfReviews = pd.DataFrame(data=reviewsDictList,\\\n",
    "                             columns=[\"title_id\",\"status\",\"review_date\",\"review_text\",\"summary\",\"username\",\\\n",
    "                                      \"user_location\", \"user_score\",\"user_score_count\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>type</th>\n",
       "      <th>rating</th>\n",
       "      <th>total_votes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>1994</td>\n",
       "      <td>feature</td>\n",
       "      <td>9.3</td>\n",
       "      <td>1678314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0068646</td>\n",
       "      <td>The Godfather</td>\n",
       "      <td>1972</td>\n",
       "      <td>feature</td>\n",
       "      <td>9.2</td>\n",
       "      <td>1148275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0071562</td>\n",
       "      <td>The Godfather: Part II</td>\n",
       "      <td>1974</td>\n",
       "      <td>feature</td>\n",
       "      <td>9.0</td>\n",
       "      <td>785197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0468569</td>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>2008</td>\n",
       "      <td>feature</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1663494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0108052</td>\n",
       "      <td>Schindlers List</td>\n",
       "      <td>1993</td>\n",
       "      <td>feature</td>\n",
       "      <td>8.9</td>\n",
       "      <td>858896</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    title_id                     title  year     type  rating  total_votes\n",
       "0  tt0111161  The Shawshank Redemption  1994  feature     9.3      1678314\n",
       "1  tt0068646             The Godfather  1972  feature     9.2      1148275\n",
       "2  tt0071562    The Godfather: Part II  1974  feature     9.0       785197\n",
       "3  tt0468569           The Dark Knight  2008  feature     9.0      1663494\n",
       "4  tt0108052           Schindlers List  1993  feature     8.9       858896"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfMovies.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>status</th>\n",
       "      <th>review_date</th>\n",
       "      <th>review_text</th>\n",
       "      <th>summary</th>\n",
       "      <th>username</th>\n",
       "      <th>user_location</th>\n",
       "      <th>user_score</th>\n",
       "      <th>user_score_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>G</td>\n",
       "      <td>2003-11-26</td>\n",
       "      <td>Why do I want to write the 234th comment on Th...</td>\n",
       "      <td>Tied for the best movie I have ever seen</td>\n",
       "      <td>carflo</td>\n",
       "      <td>Texas</td>\n",
       "      <td>2102</td>\n",
       "      <td>2421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>G</td>\n",
       "      <td>2002-08-27</td>\n",
       "      <td>Can Hollywood, usually creating things for ent...</td>\n",
       "      <td>Shawshank Redeems Hollywood</td>\n",
       "      <td>Wesley S. Walker</td>\n",
       "      <td>Paducah, KY</td>\n",
       "      <td>1380</td>\n",
       "      <td>1613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>G</td>\n",
       "      <td>2001-02-08</td>\n",
       "      <td>I have never seen such an amazing film since I...</td>\n",
       "      <td>Prepare to be moved</td>\n",
       "      <td>speedreid</td>\n",
       "      <td>Westerville, Ohio</td>\n",
       "      <td>1248</td>\n",
       "      <td>1449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>S</td>\n",
       "      <td>2006-02-10</td>\n",
       "      <td>In its Oscar year, Shawshank Redemption (writt...</td>\n",
       "      <td>A classic piece of unforgettable film-making.</td>\n",
       "      <td>Justin M (kaspen12)</td>\n",
       "      <td>Vancouver, Canada</td>\n",
       "      <td>876</td>\n",
       "      <td>992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>S</td>\n",
       "      <td>1998-08-16</td>\n",
       "      <td>The reason I became a member of this database ...</td>\n",
       "      <td>Two movies in one</td>\n",
       "      <td>Douglas-2</td>\n",
       "      <td>Chicago, IL</td>\n",
       "      <td>920</td>\n",
       "      <td>1141</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    title_id status review_date  \\\n",
       "0  tt0111161      G  2003-11-26   \n",
       "1  tt0111161      G  2002-08-27   \n",
       "2  tt0111161      G  2001-02-08   \n",
       "3  tt0111161      S  2006-02-10   \n",
       "4  tt0111161      S  1998-08-16   \n",
       "\n",
       "                                         review_text  \\\n",
       "0  Why do I want to write the 234th comment on Th...   \n",
       "1  Can Hollywood, usually creating things for ent...   \n",
       "2  I have never seen such an amazing film since I...   \n",
       "3  In its Oscar year, Shawshank Redemption (writt...   \n",
       "4  The reason I became a member of this database ...   \n",
       "\n",
       "                                         summary             username  \\\n",
       "0       Tied for the best movie I have ever seen               carflo   \n",
       "1                    Shawshank Redeems Hollywood     Wesley S. Walker   \n",
       "2                            Prepare to be moved            speedreid   \n",
       "3  A classic piece of unforgettable film-making.  Justin M (kaspen12)   \n",
       "4                              Two movies in one            Douglas-2   \n",
       "\n",
       "       user_location  user_score  user_score_count  \n",
       "0              Texas        2102              2421  \n",
       "1        Paducah, KY        1380              1613  \n",
       "2  Westerville, Ohio        1248              1449  \n",
       "3  Vancouver, Canada         876               992  \n",
       "4        Chicago, IL         920              1141  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfReviews.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "if (DATALOAD == 'IMDB'):\n",
    "    # We are going to do some data scrubbing!!\n",
    "\n",
    "    # Start with the Movies.\n",
    "    # We are going to conver the string values to 'utf-8' format, remove whitespace characters.\n",
    "    dfMovies[\"title_id\"] = [x.encode('utf-8') for x in dfMovies[\"title_id\"]]\n",
    "    dfMovies[\"title\"] = [x.encode('utf-8').strip().replace(\"\\r\",\"\").replace(\"'\",\"\").replace('\\n',\"\")\\\n",
    "                         .replace('\"',\"\") for x in dfMovies[\"title\"]]\n",
    "    dfMovies[\"year\"] = [int(x) for x in dfMovies[\"year\"]]\n",
    "    dfMovies[\"type\"] = [x.encode('utf-8') for x in dfMovies[\"type\"]]\n",
    "    dfMovies[\"rating\"] = [float(x) for x in dfMovies[\"rating\"]]\n",
    "    dfMovies[\"total_votes\"] = [int(x) for x in dfMovies[\"total_votes\"]]\n",
    "    dfMovies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "if (DATALOAD == 'IMDB'):\n",
    "    # Scrub a dub dub!  Now on to clean the Reviews.\n",
    "    dfReviews[\"title_id\"] = [x.encode('utf-8') for x in dfReviews[\"title_id\"]]\n",
    "    dfReviews[\"status\"] = [x.encode('utf-8') for x in dfReviews[\"status\"]]\n",
    "    dfReviews[\"review_date\"] = pd.to_datetime(arg=dfReviews[\"review_date\"],format='%Y-%m-%d')\n",
    "    dfReviews[\"review_text\"] = [x.encode('utf-8').strip().replace(\"\\r\",\"\").replace('\\n',\"\") for x in dfReviews[\"review_text\"]]\n",
    "    dfReviews[\"summary\"] = ['' if (isinstance(x, NoneType) == True) else x.encode('utf-8').strip().replace(\"\\r\",\"\").replace('\\n',\"\") for x in dfReviews[\"summary\"]]\n",
    "    dfReviews[\"username\"] = [x.encode('utf-8') for x in dfReviews[\"username\"]]\n",
    "    dfReviews[\"user_location\"] = ['' if (isinstance(x, NoneType) == True) else x.encode('utf-8').strip().replace(\"\\r\",\"\").replace('\\n',\"\") for x in dfReviews[\"user_location\"]]\n",
    "    dfReviews[\"user_score\"] = [int(x) for x in dfReviews[\"user_score\"]]\n",
    "    dfReviews[\"user_score_count\"] = [int(x) for x in dfReviews[\"user_score_count\"]]\n",
    "    dfReviews"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4. Write the Results to a csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "if (DATALOAD == 'IMDB'):\n",
    "    # Because of the nature of our data - specifically the text in the reviews - it is best to save the data to a tab-separated\n",
    "    # file.  This will be the best way to maintain the integrity of the data as much as possible.\n",
    "    dfMovies.to_csv('Top25Movies.csv',sep='\\t', index=False, encoding='utf-8', \\\n",
    "                    columns=[\"title_id\",\"title\",\"year\",\"type\",\"rating\",\"total_votes\"])\n",
    "    dfReviews.to_csv('MovieReviews.csv',sep='\\t', index=False, encoding='utf-8', quotechar='\"', \\\n",
    "                    columns=[\"title_id\",\"status\",\"review_date\",\"review_text\",\"summary\",\"username\",\\\n",
    "                             \"user_location\", \"user_score\",\"user_score_count\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2: Wrangle the text data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Convert the listing identification numbers (tconst) from the first dataframe to a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# See below..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Scrape the reviews for the top 25 movies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Hint*: Use a loop to scrape each page at once"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Silly!  I already did that!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Work through each title and find the most common descriptors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Hint*: \"soup\" from BeautifulSoup is the html returned from all 25 pages. You'll need to either address each page individually or break them down by elements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# I am not sure what this is asking for...Is it referring to most frequent words in our Top 25 movie titles, or is this\n",
    "# referring to web scraping activities?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4. Convert to a string and remove the non AlphaNumeric characters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Hint*: Use regular expressions!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>status</th>\n",
       "      <th>review_date</th>\n",
       "      <th>review_text</th>\n",
       "      <th>summary</th>\n",
       "      <th>username</th>\n",
       "      <th>user_location</th>\n",
       "      <th>user_score</th>\n",
       "      <th>user_score_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>G</td>\n",
       "      <td>2003-11-26</td>\n",
       "      <td>Why do I want to write the 234th comment on Th...</td>\n",
       "      <td>Tied for the best movie I have ever seen</td>\n",
       "      <td>carflo</td>\n",
       "      <td>Texas</td>\n",
       "      <td>2102</td>\n",
       "      <td>2421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>G</td>\n",
       "      <td>2002-08-27</td>\n",
       "      <td>Can Hollywood usually creating things for ente...</td>\n",
       "      <td>Shawshank Redeems Hollywood</td>\n",
       "      <td>Wesley S. Walker</td>\n",
       "      <td>Paducah, KY</td>\n",
       "      <td>1380</td>\n",
       "      <td>1613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>G</td>\n",
       "      <td>2001-02-08</td>\n",
       "      <td>I have never seen such an amazing film since I...</td>\n",
       "      <td>Prepare to be moved</td>\n",
       "      <td>speedreid</td>\n",
       "      <td>Westerville, Ohio</td>\n",
       "      <td>1248</td>\n",
       "      <td>1449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>S</td>\n",
       "      <td>2006-02-10</td>\n",
       "      <td>In its Oscar year Shawshank Redemption written...</td>\n",
       "      <td>A classic piece of unforgettable filmmaking</td>\n",
       "      <td>Justin M (kaspen12)</td>\n",
       "      <td>Vancouver, Canada</td>\n",
       "      <td>876</td>\n",
       "      <td>992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>S</td>\n",
       "      <td>1998-08-16</td>\n",
       "      <td>The reason I became a member of this database ...</td>\n",
       "      <td>Two movies in one</td>\n",
       "      <td>Douglas-2</td>\n",
       "      <td>Chicago, IL</td>\n",
       "      <td>920</td>\n",
       "      <td>1141</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    title_id status review_date  \\\n",
       "0  tt0111161      G  2003-11-26   \n",
       "1  tt0111161      G  2002-08-27   \n",
       "2  tt0111161      G  2001-02-08   \n",
       "3  tt0111161      S  2006-02-10   \n",
       "4  tt0111161      S  1998-08-16   \n",
       "\n",
       "                                         review_text  \\\n",
       "0  Why do I want to write the 234th comment on Th...   \n",
       "1  Can Hollywood usually creating things for ente...   \n",
       "2  I have never seen such an amazing film since I...   \n",
       "3  In its Oscar year Shawshank Redemption written...   \n",
       "4  The reason I became a member of this database ...   \n",
       "\n",
       "                                       summary             username  \\\n",
       "0     Tied for the best movie I have ever seen               carflo   \n",
       "1                  Shawshank Redeems Hollywood     Wesley S. Walker   \n",
       "2                          Prepare to be moved            speedreid   \n",
       "3  A classic piece of unforgettable filmmaking  Justin M (kaspen12)   \n",
       "4                            Two movies in one            Douglas-2   \n",
       "\n",
       "       user_location  user_score  user_score_count  \n",
       "0              Texas        2102              2421  \n",
       "1        Paducah, KY        1380              1613  \n",
       "2  Westerville, Ohio        1248              1449  \n",
       "3  Vancouver, Canada         876               992  \n",
       "4        Chicago, IL         920              1141  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  Thanks for the hint!  It worked splendidly.\n",
    "regex = re.compile('[^a-z A-Z0-9]')\n",
    "dfReviews[\"review_text\"] = [regex.sub('', str(x)) for x in dfReviews[\"review_text\"]]\n",
    "dfReviews[\"summary\"] = [regex.sub('', str(x)) for x in dfReviews[\"summary\"]]\n",
    "dfReviews.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5. Tokenize the Output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature Count: 15905\n"
     ]
    }
   ],
   "source": [
    "cvec = CountVectorizer(stop_words='english')\n",
    "cvec.fit(dfReviews['review_text'])\n",
    "print \"Feature Count: \" + str(len(cvec.get_feature_names()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6. Convert to a Dataframe for Easy Viewing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>007like</th>\n",
       "      <th>10</th>\n",
       "      <th>100</th>\n",
       "      <th>1000</th>\n",
       "      <th>10000</th>\n",
       "      <th>100s</th>\n",
       "      <th>101</th>\n",
       "      <th>1010</th>\n",
       "      <th>1010thanks</th>\n",
       "      <th>1011</th>\n",
       "      <th>...</th>\n",
       "      <th>zimmer</th>\n",
       "      <th>zimmers</th>\n",
       "      <th>zipping</th>\n",
       "      <th>zodiac</th>\n",
       "      <th>zone</th>\n",
       "      <th>zones</th>\n",
       "      <th>zoom</th>\n",
       "      <th>zooming</th>\n",
       "      <th>zooms</th>\n",
       "      <th>zulu</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 15905 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   007like  10  100  1000  10000  100s  101  1010  1010thanks  1011  ...   \\\n",
       "0        0   0    0     0      0     0    0     0           0     0  ...    \n",
       "1        0   0    0     0      0     0    0     0           0     0  ...    \n",
       "2        0   0    0     0      0     0    0     0           0     0  ...    \n",
       "3        0   0    0     0      0     0    0     0           0     0  ...    \n",
       "4        0   0    0     0      0     0    0     0           0     0  ...    \n",
       "\n",
       "   zimmer  zimmers  zipping  zodiac  zone  zones  zoom  zooming  zooms  zulu  \n",
       "0       0        0        0       0     0      0     0        0      0     0  \n",
       "1       0        0        0       0     0      0     0        0      0     0  \n",
       "2       0        0        0       0     0      0     0        0      0     0  \n",
       "3       0        0        0       0     0      0     0        0      0     0  \n",
       "4       0        0        0       0     0      0     0        0      0     0  \n",
       "\n",
       "[5 rows x 15905 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train = pd.DataFrame(cvec.transform(dfReviews['review_text']).todense(),\n",
    "                       columns=cvec.get_feature_names())\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  7. Find the rows with the top five descriptive words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "words = ('best', 'hope', 'love', 'beautiful', 'great')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "film     1789\n",
       "movie    1182\n",
       "just      544\n",
       "time      496\n",
       "like      493\n",
       "best      444\n",
       "story     437\n",
       "films     415\n",
       "great     387\n",
       "good      364\n",
       "dtype: int64"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Here are the 10 Most Frequently used words in the reviews we scraped\n",
    "SWordFreq = pd.Series(data=([sum([x for x in X_train[c]]) for c in X_train.columns]),index=X_train.columns)\n",
    "SWordFreq.sort_values(ascending=False,inplace=True)\n",
    "SWordFreq[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Frequency Count for 'best': 444\n",
      "Frequency Count for 'hope': 94\n",
      "Frequency Count for 'love': 117\n",
      "Frequency Count for 'beautiful': 56\n",
      "Frequency Count for 'great': 387\n"
     ]
    }
   ],
   "source": [
    "# Find the frequencies of the list of words.\n",
    "for i in words:\n",
    "    print \"Frequency Count for '\" + i + \"': \" + str(SWordFreq[i])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 8. Write the results to a csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_train.to_csv(\"TokenMovieReviews.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 9. Repeat the process for the other top 24 titles"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 3: Combine Tables in PostgreSQL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Import your two .csv data files into your Postgre Database as two different tables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For ease, we can call these table1 and table2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Connect to database and query the joined set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#  Connecting to a database using psycopg2\n",
    "conn = psycopg2.connect('host=localhost dbname=dsiMovies user=dsi_student password=gastudents port=5432')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Join the two tables "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "sql = 'SELECT m.*, mr.* FROM movies as m JOIN movie_reviews as mr ON m.title_id = mr.title_id;'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4. Select the newly joined table and save two copies of the into dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(500, 15)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfResults1 = pd.read_sql_query(sql,con=conn)\n",
    "dfResults2 = pd.read_sql_query(sql,con=conn)\n",
    "dfResults1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>title</th>\n",
       "      <th>movie_year</th>\n",
       "      <th>movie_type</th>\n",
       "      <th>rating</th>\n",
       "      <th>total_votes</th>\n",
       "      <th>title_id</th>\n",
       "      <th>status</th>\n",
       "      <th>review_date</th>\n",
       "      <th>review_text</th>\n",
       "      <th>summary</th>\n",
       "      <th>review_username</th>\n",
       "      <th>user_location</th>\n",
       "      <th>user_score</th>\n",
       "      <th>user_score_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>1994</td>\n",
       "      <td>feature</td>\n",
       "      <td>9.3</td>\n",
       "      <td>1678314</td>\n",
       "      <td>tt0111161</td>\n",
       "      <td>G</td>\n",
       "      <td>2003-11-26</td>\n",
       "      <td>Why do I want to write the 234th comment on Th...</td>\n",
       "      <td>Tied for the best movie I have ever seen</td>\n",
       "      <td>carflo</td>\n",
       "      <td>Texas</td>\n",
       "      <td>2102</td>\n",
       "      <td>2421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>1994</td>\n",
       "      <td>feature</td>\n",
       "      <td>9.3</td>\n",
       "      <td>1678314</td>\n",
       "      <td>tt0111161</td>\n",
       "      <td>G</td>\n",
       "      <td>2002-08-27</td>\n",
       "      <td>Can Hollywood, usually creating things for ent...</td>\n",
       "      <td>Shawshank Redeems Hollywood</td>\n",
       "      <td>Wesley S. Walker</td>\n",
       "      <td>Paducah, KY</td>\n",
       "      <td>1380</td>\n",
       "      <td>1613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>1994</td>\n",
       "      <td>feature</td>\n",
       "      <td>9.3</td>\n",
       "      <td>1678314</td>\n",
       "      <td>tt0111161</td>\n",
       "      <td>G</td>\n",
       "      <td>2001-02-08</td>\n",
       "      <td>I have never seen such an amazing film since I...</td>\n",
       "      <td>Prepare to be moved</td>\n",
       "      <td>speedreid</td>\n",
       "      <td>Westerville, Ohio</td>\n",
       "      <td>1248</td>\n",
       "      <td>1449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>1994</td>\n",
       "      <td>feature</td>\n",
       "      <td>9.3</td>\n",
       "      <td>1678314</td>\n",
       "      <td>tt0111161</td>\n",
       "      <td>S</td>\n",
       "      <td>2006-02-10</td>\n",
       "      <td>In its Oscar year, Shawshank Redemption (writt...</td>\n",
       "      <td>A classic piece of unforgettable film-making.</td>\n",
       "      <td>Justin M (kaspen12)</td>\n",
       "      <td>Vancouver, Canada</td>\n",
       "      <td>876</td>\n",
       "      <td>992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0111161</td>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>1994</td>\n",
       "      <td>feature</td>\n",
       "      <td>9.3</td>\n",
       "      <td>1678314</td>\n",
       "      <td>tt0111161</td>\n",
       "      <td>S</td>\n",
       "      <td>1998-08-16</td>\n",
       "      <td>The reason I became a member of this database ...</td>\n",
       "      <td>Two movies in one</td>\n",
       "      <td>Douglas-2</td>\n",
       "      <td>Chicago, IL</td>\n",
       "      <td>920</td>\n",
       "      <td>1141</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    title_id                     title  movie_year movie_type  rating  \\\n",
       "0  tt0111161  The Shawshank Redemption        1994    feature     9.3   \n",
       "1  tt0111161  The Shawshank Redemption        1994    feature     9.3   \n",
       "2  tt0111161  The Shawshank Redemption        1994    feature     9.3   \n",
       "3  tt0111161  The Shawshank Redemption        1994    feature     9.3   \n",
       "4  tt0111161  The Shawshank Redemption        1994    feature     9.3   \n",
       "\n",
       "   total_votes   title_id status review_date  \\\n",
       "0      1678314  tt0111161      G  2003-11-26   \n",
       "1      1678314  tt0111161      G  2002-08-27   \n",
       "2      1678314  tt0111161      G  2001-02-08   \n",
       "3      1678314  tt0111161      S  2006-02-10   \n",
       "4      1678314  tt0111161      S  1998-08-16   \n",
       "\n",
       "                                         review_text  \\\n",
       "0  Why do I want to write the 234th comment on Th...   \n",
       "1  Can Hollywood, usually creating things for ent...   \n",
       "2  I have never seen such an amazing film since I...   \n",
       "3  In its Oscar year, Shawshank Redemption (writt...   \n",
       "4  The reason I became a member of this database ...   \n",
       "\n",
       "                                         summary      review_username  \\\n",
       "0       Tied for the best movie I have ever seen               carflo   \n",
       "1                    Shawshank Redeems Hollywood     Wesley S. Walker   \n",
       "2                            Prepare to be moved            speedreid   \n",
       "3  A classic piece of unforgettable film-making.  Justin M (kaspen12)   \n",
       "4                              Two movies in one            Douglas-2   \n",
       "\n",
       "       user_location  user_score  user_score_count  \n",
       "0              Texas        2102              2421  \n",
       "1        Paducah, KY        1380              1613  \n",
       "2  Westerville, Ohio        1248              1449  \n",
       "3  Vancouver, Canada         876               992  \n",
       "4        Chicago, IL         920              1141  "
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfResults1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 4: Parsing and Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Rename the column headings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Run a description of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "#### 3. Visualize the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 3: Build the Decision Tree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "#### 1. What is our target attribute? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Prepare the data and define the training set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Train the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Set up test data and test the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5. Check the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6. What is overfitting and how are we at risk? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
